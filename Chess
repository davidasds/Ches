index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" name="David's Chess">
    <title>David's Chess Game</title>
    <link rel="manifest" href="manifest.json">
    <style>
        * {
            -webkit-tap-highlight-color: transparent;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            user-select: none;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            overflow: hidden;
        }
        
        .game-container {
            background: white;
            border-radius: 15px;
            padding: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            width: 100%;
            max-width: 500px;
            margin: 10px;
        }
        
        .board-container {
            display: flex;
            align-items: flex-start;
            justify-content: center;
            margin: 0 auto;
        }
        
        .board-with-labels {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
        }
        
        .board {
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            grid-template-rows: repeat(8, 1fr);
            border: 2px solid #333;
            width: 100%;
            max-width: 400px;
            aspect-ratio: 1;
        }
        
        .row-label {
            width: 20px;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 14px;
            color: #333;
            margin-left: 5px;
        }
        
        .col-labels {
            display: flex;
            justify-content: center;
            margin-top: 5px;
            width: 100%;
            max-width: 400px;
        }
        
        .col-label {
            flex: 1;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 14px;
            color: #333;
        }
        
        .square {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: calc(min(6vw, 30px));
            cursor: pointer;
            position: relative;
            -webkit-tap-highlight-color: transparent;
        }
        
        .light {
            background-color: #f0d9b5;
        }
        
        .dark {
            background-color: #b58863;
        }
        
        .selected {
            background-color: #ffff00 !important;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.5);
        }
        
        .valid-move {
            background-color: #90EE90 !important;
        }
        
        .valid-move::after {
            content: '';
            position: absolute;
            width: 30%;
            height: 30%;
            border-radius: 50%;
            background-color: rgba(0, 0, 0, 0.2);
        }
        
        .in-check {
            background-color: #ff6b6b !important;
        }
        
        .game-info {
            text-align: center;
            margin-bottom: 10px;
            padding: 0 10px;
        }
        
        .current-player {
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .game-status {
            font-size: 14px;
            color: #666;
        }
        
        .reset-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
            -webkit-appearance: none;
            appearance: none;
        }
        
        .reset-btn:active {
            background: #5a67d8;
            transform: scale(0.98);
        }
        
        .game-result-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            animation: fadeIn 0.5s ease forwards;
        }
        
        .game-result-message {
            font-size: min(15vw, 4rem);
            font-weight: bold;
            text-align: center;
            text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.5);
            transform: scale(0.5);
            animation: popUp 0.8s ease forwards;
            padding: 20px;
        }
        
        .victory {
            color: #FFD700;
            text-shadow: 3px 3px 6px rgba(255, 215, 0, 0.5);
        }
        
        .defeat {
            color: #FF4444;
            text-shadow: 3px 3px 6px rgba(255, 68, 68, 0.5);
        }
        
        .draw {
            color: #888888;
            text-shadow: 3px 3px 6px rgba(136, 136, 136, 0.5);
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes popUp {
            0% {
                transform: scale(0.5) rotate(-5deg);
                opacity: 0;
            }
            50% {
                transform: scale(1.2) rotate(2deg);
                opacity: 0.8;
            }
            100% {
                transform: scale(1) rotate(0deg);
                opacity: 1;
            }
        }
        
        /* Landscape mode adjustments */
        @media (orientation: landscape) and (max-height: 500px) {
            .game-container {
                padding: 5px;
            }
            .game-info {
                margin-bottom: 5px;
            }
            .current-player {
                font-size: 14px;
                margin-bottom: 2px;
            }
            .reset-btn {
                padding: 5px 15px;
                font-size: 14px;
                margin-top: 5px;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="game-info">
            <div class="current-player" id="currentPlayer">Current Player: White</div>
            <div class="game-status" id="gameStatus">Game in progress</div>
            <button class="reset-btn" onclick="resetGame()">New Game</button>
        </div>
        <div class="board-with-labels">
            <div class="board-container">
                <div id="boardRows"></div>
                <div class="row-labels" id="rowLabels"></div>
            </div>
            <div class="col-labels" id="colLabels"></div>
        </div>
    </div>

    <script>
        // Prevent zooming on double tap
        document.addEventListener('touchstart', function(event) {
            if (event.touches.length > 1) {
                event.preventDefault();
            }
        });
        
        let lastTouchEnd = 0;
        document.addEventListener('touchend', function(event) {
            const now = (new Date()).getTime();
            if (now - lastTouchEnd <= 300) {
                event.preventDefault();
            }
            lastTouchEnd = now;
        }, false);

        // Chess pieces using Unicode symbols
        const pieces = {
            'wK': '♔', 'wQ': '♕', 'wR': '♖', 'wB': '♗', 'wN': '♘', 'wP': '♙',
            'bK': '♚', 'bQ': '♛', 'bR': '♜', 'bB': '♝', 'bN': '♞', 'bP': '♟'
        };

        // Initial board setup
        let board = [
            ['bR', 'bN', 'bB', 'bQ', 'bK', 'bB', 'bN', 'bR'],
            ['bP', 'bP', 'bP', 'bP', 'bP', 'bP', 'bP', 'bP'],
            ['', '', '', '', '', '', '', ''],
            ['', '', '', '', '', '', '', ''],
            ['', '', '', '', '', '', '', ''],
            ['', '', '', '', '', '', '', ''],
            ['wP', 'wP', 'wP', 'wP', 'wP', 'wP', 'wP', 'wP'],
            ['wR', 'wN', 'wB', 'wQ', 'wK', 'wB', 'wN', 'wR']
        ];

        let currentPlayer = 'w';
        let selectedSquare = null;
        let gameOver = false;
        let kingPositions = { w: {row: 7, col: 4}, b: {row: 0, col: 4} };

        function createBoard() {
            const boardRowsElement = document.getElementById('boardRows');
            const rowLabelsElement = document.getElementById('rowLabels');
            const colLabelsElement = document.getElementById('colLabels');
            
            boardRowsElement.innerHTML = '';
            rowLabelsElement.innerHTML = '';
            colLabelsElement.innerHTML = '';
            
            // Create the main board container
            const boardElement = document.createElement('div');
            boardElement.className = 'board';
            boardElement.id = 'chessBoard';
            
            // Create board squares
            for (let row = 0; row < 8; row++) {
                for (let col = 0; col < 8; col++) {
                    const square = document.createElement('div');
                    square.className = `square ${(row + col) % 2 === 0 ? 'light' : 'dark'}`;
                    square.dataset.row = row;
                    square.dataset.col = col;
                    square.innerHTML = board[row][col] ? pieces[board[row][col]] : '';
                    square.addEventListener('click', handleSquareClick);
                    square.addEventListener('touchstart', function(e) {
                        e.preventDefault();
                        handleSquareClick.call(this, e);
                    }, {passive: false});
                    boardElement.appendChild(square);
                }
            }
            
            boardRowsElement.appendChild(boardElement);
            
            // Create row labels (8 to 1, from top to bottom)
            for (let row = 0; row < 8; row++) {
                const rowLabel = document.createElement('div');
                rowLabel.className = 'row-label';
                rowLabel.textContent = 8 - row;
                rowLabelsElement.appendChild(rowLabel);
            }
            
            // Create column labels (a to h, from left to right)
            const colLetters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
            for (let col = 0; col < 8; col++) {
                const colLabel = document.createElement('div');
                colLabel.className = 'col-label';
                colLabel.textContent = colLetters[col];
                colLabelsElement.appendChild(colLabel);
            }
        }

        function handleSquareClick(e) {
            if (gameOver) return;
            
            const row = parseInt(e.currentTarget.dataset.row);
            const col = parseInt(e.currentTarget.dataset.col);
            
            if (selectedSquare) {
                if (selectedSquare.row === row && selectedSquare.col === col) {
                    clearSelection();
                } else if (isValidMove(selectedSquare.row, selectedSquare.col, row, col)) {
                    makeMove(selectedSquare.row, selectedSquare.col, row, col);
                    clearSelection();
                    switchPlayer();
                    checkGameState();
                } else {
                    if (board[row][col] && board[row][col][0] === currentPlayer) {
                        selectSquare(row, col);
                    } else {
                        clearSelection();
                    }
                }
            } else if (board[row][col] && board[row][col][0] === currentPlayer) {
                selectSquare(row, col);
            }
        }

        function selectSquare(row, col) {
            clearSelection();
            selectedSquare = { row, col };
            const square = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
            square.classList.add('selected');
            highlightValidMoves(row, col);
        }

        function clearSelection() {
            const squares = document.querySelectorAll('.square');
            squares.forEach(square => {
                square.classList.remove('selected', 'valid-move');
            });
            selectedSquare = null;
        }

        function highlightValidMoves(row, col) {
            for (let r = 0; r < 8; r++) {
                for (let c = 0; c < 8; c++) {
                    if (isValidMove(row, col, r, c)) {
                        const square = document.querySelector(`[data-row="${r}"][data-col="${c}"]`);
                        square.classList.add('valid-move');
                    }
                }
            }
        }

        function isValidMove(fromRow, fromCol, toRow, toCol) {
            if (toRow < 0 || toRow > 7 || toCol < 0 || toCol > 7) return false;
            
            const piece = board[fromRow][fromCol];
            const targetPiece = board[toRow][toCol];
            
            if (!piece) return false;
            if (targetPiece && targetPiece[0] === piece[0]) return false;
            
            const pieceType = piece[1];
            const color = piece[0];
            
            let isValid = false;
            
            switch (pieceType) {
                case 'P':
                    isValid = isValidPawnMove(fromRow, fromCol, toRow, toCol, color);
                    break;
                case 'R':
                    isValid = isValidRookMove(fromRow, fromCol, toRow, toCol);
                    break;
                case 'N':
                    isValid = isValidKnightMove(fromRow, fromCol, toRow, toCol);
                    break;
                case 'B':
                    isValid = isValidBishopMove(fromRow, fromCol, toRow, toCol);
                    break;
                case 'Q':
                    isValid = isValidQueenMove(fromRow, fromCol, toRow, toCol);
                    break;
                case 'K':
                    isValid = isValidKingMove(fromRow, fromCol, toRow, toCol);
                    break;
            }
            
            if (!isValid) return false;
            
            return !wouldBeInCheck(fromRow, fromCol, toRow, toCol, color);
        }

        function isValidPawnMove(fromRow, fromCol, toRow, toCol, color) {
            const direction = color === 'w' ? -1 : 1;
            const startRow = color === 'w' ? 6 : 1;
            
            if (fromCol === toCol) {
                if (toRow === fromRow + direction && !board[toRow][toCol]) {
                    return true;
                }
                if (fromRow === startRow && toRow === fromRow + 2 * direction && 
                    !board[toRow][toCol] && !board[fromRow + direction][fromCol]) {
                    return true;
                }
            }
            else if (Math.abs(fromCol - toCol) === 1 && toRow === fromRow + direction) {
                return board[toRow][toCol] && board[toRow][toCol][0] !== color;
            }
            
            return false;
        }

        function isValidRookMove(fromRow, fromCol, toRow, toCol) {
            if (fromRow !== toRow && fromCol !== toCol) return false;
            return isPathClear(fromRow, fromCol, toRow, toCol);
        }

        function isValidKnightMove(fromRow, fromCol, toRow, toCol) {
            const rowDiff = Math.abs(fromRow - toRow);
            const colDiff = Math.abs(fromCol - toCol);
            return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2);
        }

        function isValidBishopMove(fromRow, fromCol, toRow, toCol) {
            if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;
            return isPathClear(fromRow, fromCol, toRow, toCol);
        }

        function isValidQueenMove(fromRow, fromCol, toRow, toCol) {
            return isValidRookMove(fromRow, fromCol, toRow, toCol) || 
                   isValidBishopMove(fromRow, fromCol, toRow, toCol);
        }

        function isValidKingMove(fromRow, fromCol, toRow, toCol) {
            const rowDiff = Math.abs(fromRow - toRow);
            const colDiff = Math.abs(fromCol - toCol);
            return rowDiff <= 1 && colDiff <= 1;
        }

        function isPathClear(fromRow, fromCol, toRow, toCol) {
            const rowStep = toRow > fromRow ? 1 : toRow < fromRow ? -1 : 0;
            const colStep = toCol > fromCol ? 1 : toCol < fromCol ? -1 : 0;
            
            let currentRow = fromRow + rowStep;
            let currentCol = fromCol + colStep;
            
            while (currentRow !== toRow || currentCol !== toCol) {
                if (board[currentRow][currentCol]) return false;
                currentRow += rowStep;
                currentCol += colStep;
            }
            
            return true;
        }

        function makeMove(fromRow, fromCol, toRow, toCol) {
            const piece = board[fromRow][fromCol];
            
            if (piece[1] === 'K') {
                kingPositions[piece[0]] = { row: toRow, col: toCol };
            }
            
            board[toRow][toCol] = piece;
            board[fromRow][fromCol] = '';
            createBoard();
        }

        function wouldBeInCheck(fromRow, fromCol, toRow, toCol, color) {
            const originalPiece = board[toRow][toCol];
            const movingPiece = board[fromRow][fromCol];
            board[toRow][toCol] = movingPiece;
            board[fromRow][fromCol] = '';
            
            let originalKingPos;
            if (movingPiece[1] === 'K') {
                originalKingPos = { ...kingPositions[color] };
                kingPositions[color] = { row: toRow, col: toCol };
            }
            
            const inCheck = isInCheck(color);
            
            board[fromRow][fromCol] = movingPiece;
            board[toRow][toCol] = originalPiece;
            
            if (movingPiece[1] === 'K') {
                kingPositions[color] = originalKingPos;
            }
            
            return inCheck;
        }

        function isInCheck(color) {
            const kingPos = kingPositions[color];
            const opponentColor = color === 'w' ? 'b' : 'w';
            
            for (let row = 0; row < 8; row++) {
                for (let col = 0; col < 8; col++) {
                    const piece = board[row][col];
                    if (piece && piece[0] === opponentColor) {
                        if (canPieceAttack(row, col, kingPos.row, kingPos.col)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        function canPieceAttack(fromRow, fromCol, toRow, toCol) {
            const piece = board[fromRow][fromCol];
            const pieceType = piece[1];
            const color = piece[0];
            
            switch (pieceType) {
                case 'P':
                    const direction = color === 'w' ? -1 : 1;
                    return Math.abs(fromCol - toCol) === 1 && toRow === fromRow + direction;
                case 'R':
                    return isValidRookMove(fromRow, fromCol, toRow, toCol);
                case 'N':
                    return isValidKnightMove(fromRow, fromCol, toRow, toCol);
                case 'B':
                    return isValidBishopMove(fromRow, fromCol, toRow, toCol);
                case 'Q':
                    return isValidQueenMove(fromRow, fromCol, toRow, toCol);
                case 'K':
                    return isValidKingMove(fromRow, fromCol, toRow, toCol);
            }
            return false;
        }

        function hasValidMoves(color) {
            for (let fromRow = 0; fromRow < 8; fromRow++) {
                for (let fromCol = 0; fromCol < 8; fromCol++) {
                    const piece = board[fromRow][fromCol];
                    if (piece && piece[0] === color) {
                        for (let toRow = 0; toRow < 8; toRow++) {
                            for (let toCol = 0; toCol < 8; toCol++) {
                                if (isValidMove(fromRow, fromCol, toRow, toCol)) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            return false;
        }

        function switchPlayer() {
            currentPlayer = currentPlayer === 'w' ? 'b' : 'w';
            document.getElementById('currentPlayer').textContent = 
                `Current Player: ${currentPlayer === 'w' ? 'White' : 'Black'}`;
        }

        function checkGameState() {
            const inCheck = isInCheck(currentPlayer);
            const hasValidMovesLeft = hasValidMoves(currentPlayer);
            
            document.querySelectorAll('.in-check').forEach(square => {
                square.classList.remove('in-check');
            });
            
            if (inCheck) {
                const kingPos = kingPositions[currentPlayer];
                const kingSquare = document.querySelector(`[data-row="${kingPos.row}"][data-col="${kingPos.col}"]`);
                kingSquare.classList.add('in-check');
                
                if (!hasValidMovesLeft) {
                    gameOver = true;
                    const winner = currentPlayer === 'w' ? 'Black' : 'White';
                    document.getElementById('gameStatus').textContent = `Checkmate! ${winner} wins!`;
                    
                    setTimeout(() => {
                        if (currentPlayer === 'b') {
                            showGameResult('VICTORY!', 'victory');
                        } else {
                            showGameResult('DEFEAT!', 'defeat');
                        }
                    }, 500);
                } else {
                    document.getElementById('gameStatus').textContent = 'Check!';
                }
            } else if (!hasValidMovesLeft) {
                gameOver = true;
                document.getElementById('gameStatus').textContent = 'Stalemate! Draw!';
                setTimeout(() => {
                    showGameResult('STALEMATE!<br>It\'s a Draw!', 'draw');
                }, 500);
            } else {
                document.getElementById('gameStatus').textContent = 'Game in progress';
            }
        }
        
        function showGameResult(message, type) {
            const existingOverlay = document.querySelector('.game-result-overlay');
            if (existingOverlay) {
                existingOverlay.remove();
            }
            
            const overlay = document.createElement('div');
            overlay.className = 'game-result-overlay';
            
            const messageElement = document.createElement('div');
            messageElement.className = `game-result-message ${type}`;
            messageElement.innerHTML = message;
            
            overlay.appendChild(messageElement);
            document.body.appendChild(overlay);
            
            setTimeout(() => {
                if (overlay.parentNode) {
                    overlay.remove();
                }
            }, 3000);
        }

        function resetGame() {
            const existingOverlay = document.querySelector('.game-result-overlay');
            if (existingOverlay) {
                existingOverlay.remove();
            }
            
            board = [
                ['bR', 'bN', 'bB', 'bQ', 'bK', 'bB', 'bN', 'bR'],
                ['bP', 'bP', 'bP', 'bP', 'bP', 'bP', 'bP', 'bP'],
                ['', '', '', '', '', '', '', ''],
                ['', '', '', '', '', '', '', ''],
                ['', '', '', '', '', '', '', ''],
                ['', '', '', '', '', '', '', ''],
                ['wP', 'wP', 'wP', 'wP', 'wP', 'wP', 'wP', 'wP'],
                ['wR', 'wN', 'wB', 'wQ', 'wK', 'wB', 'wN', 'wR']
            ];
            
            currentPlayer = 'w';
            selectedSquare = null;
            gameOver = false;
            kingPositions = { w: {row: 7, col: 4}, b: {row: 0, col: 4} };
            
            document.getElementById('currentPlayer').textContent = 'Current Player: White';
            document.getElementById('gameStatus').textContent = 'Game in progress';
            
            createBoard();
        }

        // Initialize the game
        createBoard();
        
        // Register service worker for offline play
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('sw.js')
                    .then(reg => console.log('Service Worker registered'))
                    .catch(err => console.log('Service Worker registration failed'));
            });
        }
    </script>
</body>
</html>
Add full chess game HTML
navigator.serviceWorker.register('sw.js')

